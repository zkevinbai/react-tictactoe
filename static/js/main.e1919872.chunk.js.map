{"version":3,"sources":["index.js"],"names":["Square","squareClass","onClick","value","index","row","column","className","Board","squares","winningMoves","columns","map","key","includes","renderRow","Game","props","state","history","Array","fill","player","moveRow","moveColumn","xIsNext","winner","stepNumber","selected","movesDescending","this","slice","newSquares","length","calculateWinningMoves","setState","getPlayer","concat","lines","i","a","b","c","step","status","currentBoard","tie","every","position","movesClassName","moves","board","buttonClassName","jumpTo","handleClick","bind","sortMoves","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1919872.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square({\n    squareClass,\n    onClick,\n    value,\n    index,\n    row,\n    column,\n}) {\n    return (\n        <button \n            className={`square ${squareClass}`}\n            onClick={() => onClick(index, row, column)}\n        >\n            {value}\n        </button>\n    );\n}\n\nfunction Board({ \n    squares,\n    onClick,\n    winningMoves,\n}) {\n    const columns = [1, 2, 3]\n    const rows = [1, 2, 3];\n\n    const renderRow = (row) => (\n        <div key={row} className=\"board-row\">\n            {columns.map((column) => {\n                const index = (column - 1) + (3 * (row - 1));\n                // this generates indices 0 through 8\n                // I would prefer to hard code for clarity, this is for a challenge\n\n                let squareClass = \"\";\n\n                if (winningMoves.includes(index)) {\n                    squareClass = 'square-winning'\n                }\n\n                return (\n                    <Square\n                        key={row + column}\n                        squareClass={squareClass}\n                        value={squares[index]}\n                        index={index}\n                        row={row}\n                        column={column}\n                        onClick={onClick}\n                    />\n                )\n            })}\n        </div>\n    )\n\n    return (\n        <div>\n            {rows.map((row) => renderRow(row))}\n        </div>\n    );\n}\n\nclass Game extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n                player: null,\n                moveRow: null,\n                moveColumn: null,\n            }],\n            xIsNext: true,\n            winner: false,\n            stepNumber: 0,\n            selected: null,\n            movesDescending: true,\n            winningMoves: null,\n        }\n    }\n\n    getPlayer () {\n        return this.state.xIsNext ? 'X' : 'O'\n    }\n\n    handleClick (index, row, column) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const currentBoard = history[history.length - 1];\n        const newSquares = currentBoard.squares.slice();\n\n        const winningMoves = this.calculateWinningMoves(newSquares);\n\n        if (winningMoves || newSquares[index]) {\n            this.setState({\n                winningMoves,\n            })\n            return;\n        }\n\n        const player = this.getPlayer();\n\n        newSquares[index] = player;\n\n        this.setState({\n            history: history.concat([{\n                squares: newSquares,\n                player,\n                moveRow: row,\n                moveColumn: column,\n            }]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length, // this is the current history length, before the concat fires\n                // if we are adding step 2, and will have 2 history items after\n                // history.length will still evaluate to 1\n                // but 1 is the correct stepNumber to access the last element in the history array\n                // because you count from 0 in JS\n            winningMoves: this.calculateWinningMoves(newSquares),\n        });\n    }\n\n    calculateWinningMoves (squares) {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n\n        for (let i = 0; i < lines.length; i++) {\n            const [a, b, c] = lines[i];\n            if (squares[a] === squares[b] && squares[b] === squares[c] && squares[a] !== null) {\n                return lines[i];\n            }\n        }\n\n        return null;\n    };\n\n    jumpTo (step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2 === 0),\n            selected: step,\n        });\n    }\n\n    sortMoves () {\n        this.setState({\n            movesDescending: !this.state.movesDescending\n        })\n    }\n\n    render () {\n        const history = this.state.history;\n        const currentBoard = history[this.state.stepNumber];\n        const winningMoves = this.calculateWinningMoves(currentBoard.squares);\n        const tie = currentBoard.squares.every(position => position) && !winningMoves;\n\n        let status;\n\n        if (winningMoves) {\n            status = 'Winner: ' + currentBoard.squares[winningMoves[0]]\n        } else if (tie) {\n            status = 'Tie game no winner'\n        } else {\n            status = `Next player: ${this.getPlayer()}`;\n        }\n\n        let movesClassName = '';\n    \n        if (!this.state.movesDescending) {\n            movesClassName = 'game-moves-reversed'\n        }\n\n        const moves = history.map( (board, index) => {\n            const { player, moveRow, moveColumn } = board;\n\n            let buttonClassName = \"game-move-button\";\n\n            if (this.state.selected === index) {\n                buttonClassName = \"game-move-button game-move-button-selected\"\n            }\n\n            return (\n                <li\n                    key={index}\n                >\n                    <button className={buttonClassName} onClick={() => this.jumpTo(index)}>\n                        {moveRow && moveColumn ?\n                            `Go to move # ${index} by ${player} at row ${moveRow} and column ${moveColumn}`:\n                            'Go to game start'\n                        }\n                    </button>\n                </li>\n            )\n        })\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                        winningMoves={this.state.winningMoves || []}\n                        squares={currentBoard.squares}\n                        onClick={this.handleClick.bind(this)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <button\n                        onClick={() => this.sortMoves()}\n                    >\n                        Sort Moves\n                    </button>\n                    <ol\n                        className={movesClassName}\n                    >\n                        {moves}\n                    </ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}